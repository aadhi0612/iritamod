// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer2/v1/layer2.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Space defines the space info of the layer2 module
type Space struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uri   string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Space) Reset()         { *m = Space{} }
func (m *Space) String() string { return proto.CompactTextString(m) }
func (*Space) ProtoMessage()    {}
func (*Space) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{0}
}
func (m *Space) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space.Merge(m, src)
}
func (m *Space) XXX_Size() int {
	return m.Size()
}
func (m *Space) XXX_DiscardUnknown() {
	xxx_messageInfo_Space.DiscardUnknown(m)
}

var xxx_messageInfo_Space proto.InternalMessageInfo

func (m *Space) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Space) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Space) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Space) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type L2BlockHeader struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Header  string `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *L2BlockHeader) Reset()         { *m = L2BlockHeader{} }
func (m *L2BlockHeader) String() string { return proto.CompactTextString(m) }
func (*L2BlockHeader) ProtoMessage()    {}
func (*L2BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{1}
}
func (m *L2BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L2BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L2BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L2BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2BlockHeader.Merge(m, src)
}
func (m *L2BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *L2BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_L2BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_L2BlockHeader proto.InternalMessageInfo

func (m *L2BlockHeader) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *L2BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *L2BlockHeader) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

// CollectionForNFT defines the collection info of native NFT from layer2.
type CollectionForNFT struct {
	SpaceId uint64         `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	ClassId string         `protobuf:"bytes,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Tokens  []*TokenForNFT `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *CollectionForNFT) Reset()         { *m = CollectionForNFT{} }
func (m *CollectionForNFT) String() string { return proto.CompactTextString(m) }
func (*CollectionForNFT) ProtoMessage()    {}
func (*CollectionForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{2}
}
func (m *CollectionForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionForNFT.Merge(m, src)
}
func (m *CollectionForNFT) XXX_Size() int {
	return m.Size()
}
func (m *CollectionForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionForNFT proto.InternalMessageInfo

func (m *CollectionForNFT) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *CollectionForNFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *CollectionForNFT) GetTokens() []*TokenForNFT {
	if m != nil {
		return m.Tokens
	}
	return nil
}

// ClassForNFT defines the class mapping info of native NFT from layer2.
type ClassForNFT struct {
	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	BaseUri              string `protobuf:"bytes,3,opt,name=base_uri,json=baseUri,proto3" json:"base_uri,omitempty"`
	Layer1MintRestricted bool   `protobuf:"varint,4,opt,name=layer1_mint_restricted,json=layer1MintRestricted,proto3" json:"layer1_mint_restricted,omitempty"`
}

func (m *ClassForNFT) Reset()         { *m = ClassForNFT{} }
func (m *ClassForNFT) String() string { return proto.CompactTextString(m) }
func (*ClassForNFT) ProtoMessage()    {}
func (*ClassForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{3}
}
func (m *ClassForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassForNFT.Merge(m, src)
}
func (m *ClassForNFT) XXX_Size() int {
	return m.Size()
}
func (m *ClassForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_ClassForNFT proto.InternalMessageInfo

func (m *ClassForNFT) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClassForNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ClassForNFT) GetBaseUri() string {
	if m != nil {
		return m.BaseUri
	}
	return ""
}

func (m *ClassForNFT) GetLayer1MintRestricted() bool {
	if m != nil {
		return m.Layer1MintRestricted
	}
	return false
}

// TokenForNFT defines the token mapping info of native NFT from layer2.
type TokenForNFT struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *TokenForNFT) Reset()         { *m = TokenForNFT{} }
func (m *TokenForNFT) String() string { return proto.CompactTextString(m) }
func (*TokenForNFT) ProtoMessage()    {}
func (*TokenForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{4}
}
func (m *TokenForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenForNFT.Merge(m, src)
}
func (m *TokenForNFT) XXX_Size() int {
	return m.Size()
}
func (m *TokenForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_TokenForNFT proto.InternalMessageInfo

func (m *TokenForNFT) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TokenForNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// UpdateClassForNFT defines the message for updating class mapping info.
type UpdateClassForNFT struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uri   string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *UpdateClassForNFT) Reset()         { *m = UpdateClassForNFT{} }
func (m *UpdateClassForNFT) String() string { return proto.CompactTextString(m) }
func (*UpdateClassForNFT) ProtoMessage()    {}
func (*UpdateClassForNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{5}
}
func (m *UpdateClassForNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClassForNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClassForNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClassForNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClassForNFT.Merge(m, src)
}
func (m *UpdateClassForNFT) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClassForNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClassForNFT.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClassForNFT proto.InternalMessageInfo

func (m *UpdateClassForNFT) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateClassForNFT) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *UpdateClassForNFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type TokenForNFTByOwner struct {
	SpaceId uint64 `protobuf:"varint,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty"`
	TokenId string `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *TokenForNFTByOwner) Reset()         { *m = TokenForNFTByOwner{} }
func (m *TokenForNFTByOwner) String() string { return proto.CompactTextString(m) }
func (*TokenForNFTByOwner) ProtoMessage()    {}
func (*TokenForNFTByOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_66ea35df121a9edc, []int{6}
}
func (m *TokenForNFTByOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenForNFTByOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenForNFTByOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenForNFTByOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenForNFTByOwner.Merge(m, src)
}
func (m *TokenForNFTByOwner) XXX_Size() int {
	return m.Size()
}
func (m *TokenForNFTByOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenForNFTByOwner.DiscardUnknown(m)
}

var xxx_messageInfo_TokenForNFTByOwner proto.InternalMessageInfo

func (m *TokenForNFTByOwner) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *TokenForNFTByOwner) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *TokenForNFTByOwner) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func init() {
	proto.RegisterType((*Space)(nil), "iritamod.layer2.v1.Space")
	proto.RegisterType((*L2BlockHeader)(nil), "iritamod.layer2.v1.L2BlockHeader")
	proto.RegisterType((*CollectionForNFT)(nil), "iritamod.layer2.v1.CollectionForNFT")
	proto.RegisterType((*ClassForNFT)(nil), "iritamod.layer2.v1.ClassForNFT")
	proto.RegisterType((*TokenForNFT)(nil), "iritamod.layer2.v1.TokenForNFT")
	proto.RegisterType((*UpdateClassForNFT)(nil), "iritamod.layer2.v1.UpdateClassForNFT")
	proto.RegisterType((*TokenForNFTByOwner)(nil), "iritamod.layer2.v1.TokenForNFTByOwner")
}

func init() { proto.RegisterFile("layer2/v1/layer2.proto", fileDescriptor_66ea35df121a9edc) }

var fileDescriptor_66ea35df121a9edc = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xb5, 0x24, 0xc7, 0x76, 0xc6, 0xb4, 0xa4, 0x8b, 0x09, 0x4a, 0x0f, 0xaa, 0xd1, 0xc9, 0x27,
	0x09, 0x3b, 0x85, 0xde, 0x1d, 0x08, 0x35, 0x4d, 0x5b, 0x50, 0x92, 0x4b, 0x2e, 0x66, 0xa5, 0x1d,
	0xec, 0x6d, 0x24, 0xad, 0x59, 0xad, 0x53, 0x7c, 0x2c, 0xf4, 0x03, 0xfa, 0x59, 0x3d, 0xe6, 0xd8,
	0x63, 0xb1, 0x7f, 0xa4, 0xec, 0x6a, 0xed, 0x98, 0xb4, 0x98, 0xde, 0xe6, 0xcd, 0x8c, 0xe6, 0xcd,
	0xbc, 0xa7, 0x85, 0xd3, 0x9c, 0xae, 0x50, 0x8e, 0xe2, 0x87, 0x61, 0x5c, 0x47, 0xd1, 0x42, 0x0a,
	0x25, 0x08, 0xe1, 0x92, 0x2b, 0x5a, 0x08, 0x16, 0xd9, 0xf4, 0xc3, 0xf0, 0x75, 0x6f, 0x26, 0x66,
	0xc2, 0x94, 0x63, 0x1d, 0xd5, 0x9d, 0xe1, 0x35, 0x1c, 0x5d, 0x2f, 0x68, 0x86, 0xe4, 0x25, 0xb8,
	0x9c, 0xf9, 0x4e, 0xdf, 0x19, 0x34, 0x13, 0x97, 0x33, 0x42, 0xa0, 0x59, 0xd2, 0x02, 0x7d, 0xb7,
	0xef, 0x0c, 0x8e, 0x13, 0x13, 0x93, 0x13, 0xf0, 0x96, 0x92, 0xfb, 0x9e, 0x49, 0xe9, 0x90, 0xf4,
	0xe0, 0x48, 0x7c, 0x2d, 0x51, 0xfa, 0x4d, 0x93, 0xab, 0x41, 0x78, 0x07, 0x2f, 0xae, 0x46, 0xe3,
	0x5c, 0x64, 0xf7, 0xef, 0x91, 0x32, 0x94, 0xe4, 0x0c, 0x3a, 0x95, 0x66, 0x99, 0xee, 0x28, 0xda,
	0x06, 0x4f, 0x18, 0x39, 0x85, 0xd6, 0x1c, 0xf9, 0x6c, 0xae, 0x0c, 0x53, 0x33, 0xb1, 0xa8, 0xce,
	0xeb, 0x8f, 0x2d, 0x9d, 0x45, 0xe1, 0x37, 0x07, 0x4e, 0x2e, 0x44, 0x9e, 0x63, 0xa6, 0xb8, 0x28,
	0x2f, 0x85, 0xfc, 0x74, 0x79, 0x73, 0x68, 0xfe, 0x19, 0x74, 0xb2, 0x9c, 0x56, 0x95, 0x2e, 0xd5,
	0xb7, 0xb4, 0x0d, 0x9e, 0x30, 0xf2, 0x0e, 0x5a, 0x4a, 0xdc, 0x63, 0x59, 0xf9, 0x5e, 0xdf, 0x1b,
	0x74, 0x47, 0x6f, 0xa2, 0xbf, 0x65, 0x8b, 0x6e, 0x74, 0x47, 0x4d, 0x93, 0xd8, 0xf6, 0xf0, 0xbb,
	0x03, 0xdd, 0x0b, 0x3d, 0xc4, 0xd2, 0x3f, 0x69, 0x77, 0x6c, 0xb4, 0xdb, 0xa9, 0xe2, 0xee, 0xa9,
	0xa2, 0x37, 0x49, 0x69, 0x85, 0xd3, 0x27, 0x09, 0xdb, 0x1a, 0xdf, 0x4a, 0x4e, 0xde, 0x5a, 0x27,
	0x87, 0xd3, 0x82, 0x97, 0x6a, 0x2a, 0xb1, 0x52, 0x92, 0x67, 0x0a, 0x99, 0xd1, 0xb5, 0x93, 0xf4,
	0xea, 0xea, 0x47, 0x5e, 0xaa, 0x64, 0x57, 0x0b, 0xcf, 0xa1, 0xbb, 0xb7, 0xdd, 0xff, 0x6d, 0x11,
	0x7e, 0x80, 0x57, 0xb7, 0x0b, 0x46, 0x15, 0x1e, 0x3a, 0xc0, 0x1a, 0xed, 0xfe, 0xc3, 0x68, 0x6f,
	0x7f, 0x58, 0x0a, 0x64, 0x6f, 0x83, 0xf1, 0xea, 0xb3, 0x39, 0xd4, 0x87, 0xad, 0xfa, 0xcf, 0xcd,
	0xf0, 0x61, 0x2b, 0xfe, 0x73, 0x2f, 0x7c, 0x68, 0x1b, 0x71, 0x27, 0x6c, 0xab, 0x8d, 0x85, 0xe3,
	0xab, 0x9f, 0xeb, 0xc0, 0x79, 0x5c, 0x07, 0xce, 0xef, 0x75, 0xe0, 0xfc, 0xd8, 0x04, 0x8d, 0xc7,
	0x4d, 0xd0, 0xf8, 0xb5, 0x09, 0x1a, 0x77, 0xa3, 0x19, 0x57, 0xf3, 0x65, 0x1a, 0x65, 0xa2, 0x88,
	0x53, 0x4e, 0xcb, 0x2f, 0x1c, 0x29, 0x8f, 0xb7, 0x1e, 0xc6, 0x85, 0x60, 0xcb, 0x1c, 0x2b, 0xfb,
	0x32, 0x62, 0xb5, 0x5a, 0x60, 0x95, 0xb6, 0xcc, 0x6f, 0x7f, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x8f, 0x2b, 0x8b, 0x3a, 0x03, 0x00, 0x00,
}

func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *L2BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L2BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollectionForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClassForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Layer1MintRestricted {
		i--
		if m.Layer1MintRestricted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.BaseUri) > 0 {
		i -= len(m.BaseUri)
		copy(dAtA[i:], m.BaseUri)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.BaseUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClassForNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClassForNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClassForNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenForNFTByOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenForNFTByOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenForNFTByOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLayer2(dAtA []byte, offset int, v uint64) int {
	offset -= sovLayer2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Space) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLayer2(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *L2BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovLayer2(uint64(m.SpaceId))
	}
	if m.Height != 0 {
		n += 1 + sovLayer2(uint64(m.Height))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *CollectionForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovLayer2(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	return n
}

func (m *ClassForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.BaseUri)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Layer1MintRestricted {
		n += 2
	}
	return n
}

func (m *TokenForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *UpdateClassForNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *TokenForNFTByOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovLayer2(uint64(m.SpaceId))
	}
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func sovLayer2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLayer2(x uint64) (n int) {
	return sovLayer2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &TokenForNFT{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer1MintRestricted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Layer1MintRestricted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClassForNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClassForNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClassForNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenForNFTByOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenForNFTByOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenForNFTByOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLayer2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLayer2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLayer2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLayer2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLayer2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLayer2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLayer2 = fmt.Errorf("proto: unexpected end of group")
)
